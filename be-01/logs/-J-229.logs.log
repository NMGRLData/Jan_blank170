do run
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_MS_Dynamic.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=556.052928, duration=0.000414133071899
script duration name:unknown400_120 seconds:556.0
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_MS_Dynamic.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.00271606445e-05
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_MS_Dynamic.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.19480895996e-05
executed snippet estimated_duration=0.0, duration=0.000784158706665
script duration name:MS_Dynamic seconds:0.0
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_MS_Dynamic.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000159978866577
executed snippet estimated_duration=4.0, duration=0.00122499465942
Script duration 556.0
Run total estimated duration= 557.000
run duration: 0:09:17
doing event level: 2
16:40:01 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
create new session 4946417808
close session 4946417808
$$$$$ Clearing conditionals
adding conditionals kevin
extract conditionals from file. /Users/jan/PychronDev/scripts/conditionals/kevin.yaml
no attr for this modification cd={'extraction_str': '', 'attr': '', 'mapper': '', 'use_termination': False, 'start_count': 0, 'nskip': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': 'Skip Next Run', 'ntrips': 1, 'use_truncation': False}
no attr for this cancelation cd={'mapper': '', 'window': 0, 'frequency': 1, 'attr': '', 'teststr': '', 'start_count': 0, 'ntrips': 1}
adding truncation attr="Ar40" test="Ar40>5000.0" start="10"
not adding because analysis_type not unknown or cocktail
adding truncation attr="age" test="age>10.0" start="50"
adding truncation attr="Ar39" test="Ar39.bs_corrected<0.3" start="50"
adding termination attr="Ar40" test="Ar40>5000.0" start="1"
Invalid conditional kind="pre_run_terminations"
no attr for this action cd={'mapper': '', 'attr': '', 'start_count': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': None, 'ntrips': 1}
Invalid conditional kind="post_run_terminations"
Add queue conditionals
add default conditionals
adding default conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run be-01-J-229
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_MS_Dynamic.py"
loading script "jan_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run be-01-J-229
No value "eqtime" in metadata
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
16:40:01 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
Pre Extraction Termination data. keys=H2,H1,AX,L1,L2,CDD, signals=-0.07768,0.16012,-0.03264,-0.03657,0.18690,0.00268
16:40:01 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing CDD
evaluate ot="CDD.inactive" t="CDD", ctx="{'CDD': False}"
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
16:40:01 -- ******* Pre Extraction Check Passed *******
=================================================================================
16:40:01 -- stopping status monitor
stop 4934206480
Status monitor stopped
Status monitor finished
16:40:02 -- starting status monitor
start 4934206480
StatusMonitor period=1. Frequencies(state=2, checksum=3, lock=5, owner=5)
start extraction
do extraction
Analysis started at 16:40:04.482104
Extraction Started jan_MS_Dynamic.py
16:40:04 -- ******* Extraction Started jan_MS_Dynamic.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x128c42890>
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.69548797607e-05
executed snippet estimated_duration=0.0, duration=0.00121903419495
Jan MS dynamic blank
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=6.19888305664e-05
Prepare for MS dynamic
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=9
16:40:04 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Jan Ion Pump'}
open name=--- desc=Jan Ion Pump
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=9
16:40:05 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open None (Jan Ion Pump) result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=1.08905291557
PrepareForMSdynamicAnalysis.py completed successfully
gosub finished
executed snippet estimated_duration=0.0, duration=1.09274482727
jan_MS_Dynamic.py completed successfully
GetAchievedOutput ===>> No Response
Requested Output= 0.000
Achieved Output=  0.000
GetResponseBlob ===>> No Response
GetOutputBlob ===>> No Response
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 119
Extraction Finished
16:40:05 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
16:40:05 -- Sending spectrometer configuration
======== Sending configuration ========
SetDeflection CDD,50.0 ===>> OK
SetDeflection H2,0.0 ===>> OK
SetDeflection H1,0.0 ===>> OK
SetDeflection L2,825.0 ===>> OK
SetDeflection L1,400.0 ===>> OK
SetDeflection AX,190.0 ===>> OK
SetZFocus 74.64 ===>> OK
SetZSymmetry -50.72 ===>> OK
SetExtractionLens 26.13 ===>> OK
SetIonRepeller -3.81 ===>> OK
SetElectronEnergy 75.08 ===>> OK
SetYSymmetry -2.81 ===>> OK
SetIonCounterVoltage 1590.0 ===>> OK
send trap current 200.0
GetParameter Trap Current Readback ===>> 198.258926936459
SetParameter Trap Current Set,200.0 ===>> OK
updating mftable name mftable
Using mftable located at /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
============ MFtable ===========
Isotope  H2     H1     AX     L1     L2     CDD    
Ar40     6.0567 5.8802 5.9938 6.1952 6.2317 6.6805
Ar39     6.0116 5.7711 6.0578 6.3384 6.1144 6.5670
Ar36     5.6891 5.4401 5.7212 5.9972 5.7694 6.2181
================================
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
======== Configuration Finished ========
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetParameter Trap Current Readback ===>> 197.811389855338
GetHighVoltage ===>> 4499.94659342336
start measurement
do measurement
L#=be-01-J analysis type=blank_extractionline
Measurement Started jan_unknown400_120.py
16:40:05 -- ******* Measurement Started jan_unknown400_120.py *******
state changed from extraction to measurement
setting trap, emission, spec, defl, and gains
GetExtractionLens ===>> 26.13
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetZFocus ===>> 74.64
GetDeflection H2 ===>> 0
GetDeflection H1 ===>> 0
GetDeflection AX ===>> 190
GetDeflection L1 ===>> 400
GetDeflection L2 ===>> 825
GetDeflection CDD ===>> 50
GetGain H2 ===>> 0.0113
GetGain H1 ===>> 0.1
GetGain AX ===>> 0.096344
GetGain L1 ===>> 0.010749
GetGain L2 ===>> 0.095649
GetGain CDD ===>> 0
GetParameter Trap Current Readback ===>> 198.035158395898
GetParameter Source Current Readback ===>> 553.509735701642
pre measurement save
New frame /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
testing...
no interpolation path defined
executed snippet estimated_duration=571.652928, duration=0.000236988067627
unknown measurement script
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2', 'CDD') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
clear isotope group
setting isotope det=H2, iso=Ar41
setting isotope det=H1, iso=Ar40
setting isotope det=AX, iso=Ar39
setting isotope det=L1, iso=Ar38
setting isotope det=L2, iso=Ar37
setting isotope det=CDD, iso=Ar36
load analysis view
position_magnet ('Ar40',) {'detector': 'H1'}
detector Detector(H1)
POSITION Ar40 H1
setting detector H2 to Ar41 (40.9624)
setting detector H1 to Ar40 (39.9624)
setting detector AX to Ar39 (38.9624)
setting detector L1 to Ar38 (37.9624)
setting detector L2 to Ar37 (36.9624)
setting detector CDD to Ar36 (35.9624)
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.03075323e+00]
H1 map mass to dac 39.9624 >> 5.88016
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning Ar40 (5.88012537229) on H1
setting magnet DAC
current  : 5.880125
requested: 5.880125
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88012537229 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
set_dac. change=True
equilibrate () {'delay': 3, 'inlet': 'R', 'outlet': 'O', 'eqtime': 15.0}
Equilibration Started
16:40:06 -- ******* Equilibration Started *******
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close O ===>> OK
update labels <pychron.experiment.plot_panel.PlotPanel object at 0x198bef0b0>
update labels "<pychron.graph.stacked_regression_graph.StackedRegressionGraph object at 0x19dd99a10>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
update labels "<pychron.graph.stacked_graph.StackedGraph object at 0x15892b6b0>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
GetIndicatorState O ===>> False
change switch state (True, True)
update switch state O False args=() kw={} ncanvase=9
16:40:06 -- CLOSE  VALVE-O (Jan Ion Pump)
waiting 3s before opening inlet value ('R',)
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=9
16:40:10 -- OPEN   VALVE-R (Jan Inlet)
equilibrating for 15.0sec
set_time_zero () {}
sniff (15.0,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /sniff/Ar41 (Group) '' table H2
add group /sniff/Ar40 (Group) '' table H1
add group /sniff/Ar39 (Group) '' table AX
add group /sniff/Ar38 (Group) '' table L1
add group /sniff/Ar37 (Group) '' table L2
add group /sniff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
measuring sniff. ncounts=15.0
"sniff" increment series count="1" fit count="0" regressing="False"
starting measurement
Equilibration Finished
16:40:25 -- ******* Equilibration Finished *******
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close R ===>> OK
set states for children of R. state=False
handle state [('R', False)]
update switch state R False args=() kw={'refresh': False} ncanvase=9
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=9
refresh_canvas_needed fired
16:40:26 -- CLOSE  VALVE-R (Jan Inlet)
Post Equilibration Started jan_pump_extraction_line.py
16:40:26 -- ******* Post Equilibration Started jan_pump_extraction_line.py *******
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000147104263306
executed snippet estimated_duration=4.0, duration=0.0011739730835
Pump after analysis
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000187873840332
Pump Microbone
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=9
16:40:26 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
waiting for write to finish
measurement finished
estimated time: 15.729 actual time: :15.853
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
set_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal.yaml
set "Ar41" to "('linear', 'SEM')"
set "Ar40" to "('Parabolic', 'SEM')"
set "Ar36" to "('Parabolic', 'SEM')"
set "Ar37" to "('linear', 'SEM')"
set "Ar38" to "('linear', 'SEM')"
set "Ar39" to "('Parabolic', 'SEM')"
set_baseline_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal.yaml
action=close, ok=True, locked=[False]
set "H2" to "('average', 'SEM')"
is_closed ('F',) {}
set "H1" to "('average', 'SEM')"
is F () closed?
set "CDD" to "('average', 'SEM')"
set "L2" to "('average', 'SEM')"
is closed True
set "L1" to "('average', 'SEM')"
open () {'description': 'CO2 Laser to Jan'}
set "AX" to "('average', 'SEM')"
open name=--- desc=CO2 Laser to Jan
multicollect () {'integration_time': 1, 'ncounts': 400}
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /signal/Ar41 (Group) '' table H2
checking ownership. requestor=129.138.12.150
add group /signal/Ar40 (Group) '' table H1
check software interlocks A
add group /signal/Ar39 (Group) '' table AX
interlocks []
add group /signal/Ar38 (Group) '' table L1
actuate state mode=None-script, software_lock=False
add group /signal/Ar37 (Group) '' table L2
doing actuation None-script open_channel False
add group /signal/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
measuring signal. ncounts=400
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=9
16:40:27 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
"signal" increment series count="2" fit count="1" regressing="True"
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
starting measurement
close () {'description': 'CO2 Laser to Roughing'}
close name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.150
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=9
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.208688737650488}"
16:40:28 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=9
16:40:28 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open K ===>> OK
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.0571887951851203}"
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=9
16:40:29 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=9
16:40:30 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 10.969328027673203}"
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=9
16:40:31 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 2.7619504670729977}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('JanCO2Flag',) {}
release JanCO2Flag
Set JanCO2Flag 0 ===>> OK
executed snippet estimated_duration=6.0, duration=6.20732808113
PumpMicrobone.py completed successfully
gosub finished
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
get resource value 0.0
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
executed snippet estimated_duration=4.0, duration=6.21935606003
jan_pump_extraction_line.py completed successfully
Post Equilibration Finished
16:40:32 -- ******* Post Equilibration Finished *******
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1.7484884488758436}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.21731511175989293}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -1.290530420559757}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.6942418123797881}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.2599332000764878}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7400953104580109}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7400953104580109}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.8997530121919228}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.8997530121919228}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7603840749762479}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7603840749762479}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.9883045462078305}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.9883045462078305}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5413644766618285}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5413644766618285}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.45991248461227396}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.45991248461227396}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.43652732497432756}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.43652732497432756}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.2766934092297552}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.2766934092297552}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.12968417362838564}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.12968417362838564}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.07814761008088449}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.07814761008088449}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.18898256197967667}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.18898256197967667}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13377076117846554}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13377076117846554}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.08170960448632551}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.08170960448632551}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12600287052982073}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12600287052982073}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.15031586857621176}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.15031586857621176}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
16:40:52 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1124594059190267}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1124594059190267}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.10336881143905897}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.10336881143905897}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14186838200392585}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14186838200392585}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.06087484647444909}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.06087484647444909}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.15523502415452978}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.15523502415452978}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14186716583178854}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14186716583178854}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.11372704716931156}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.11372704716931156}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16242723026121547}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16242723026121547}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14333066681353773}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14333066681353773}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14160078685874888}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.14160078685874888}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13149204947371562}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13149204947371562}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.11443990808373408}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.11443990808373408}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1312192106124545}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1312192106124545}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.10180161126266357}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.10180161126266357}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12183402079693673}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12183402079693673}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12306785997553216}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.12306785997553216}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13478127604547163}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.13478127604547163}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1344559317887053}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1344559317887053}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1611398823251713}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1611398823251713}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16600794789166323}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16600794789166323}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1884358233348818}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1884358233348818}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2032379395395446}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2032379395395446}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.17673863391076522}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.17673863391076522}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16018487403428522}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.16018487403428522}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1886750346486053}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.1886750346486053}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06395958559295302}"
16:41:18 -- collecting point 50
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.20216435733875687}"
testing age>10.0
evaluate ot="age>10.0" t="age>10.0", ctx="{'age': None}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 0.2131820510818462}"
condition Ar39<0.3 is true trips=1/1
16:41:19 -- Conditional tripped: Ar39.bs_corrected<0.3 condition Ar39<0.3 is True
16:41:19 -- truncation conditional condition Ar39<0.3 is True. measurement iteration executed 50/400 counts
state changed from measurement to truncated
waiting for write to finish
measurement finished
estimated time: 419.430 actual time: :52.645
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
baselines () {'settling_time': 15.0, 'detector': 'H1', 'mass': 34.2, 'ncounts': 120}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2
add group baseline table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
detector Detector(H1)
POSITION 34.2 H1
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.03075323e+00]
H1 map mass to dac 34.2 >> 5.24227160773
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning 34.2 (5.24224073648) on H1
setting magnet DAC
current  : 5.880125
requested: 5.242241
Delta Dac: 0.637885
Checking detector protection. dv=0.63788
Checking detector "CDD". Protection Threshold: 0.5 (V)
ProtectDetector CDD,On ===>> OK
GetDeflection CDD ===>> 2000
Protected = 2000
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
SetMagnetDAC 5.24224073648 ===>> OK
Magnet settling time: 0.500 0.500
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals None
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x170fdd050>
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x170fdd050>
active_run same as measuring_run: True
Magnet settling complete
Wait for magnet to stop moving
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
Magnet move complete
Unprotect detectors
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
set_dac. change=True
Delaying 15.0s for detectors to settle
Join finished
measuring baseline. ncounts=120.0
"baseline" increment series count="2" fit count="1" regressing="True"
starting measurement
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.20216435733875687}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23548906967686997}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2601716010251186}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.248179013803557}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10997424205775314}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24780122941313298}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2536783092576381}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2589503174261205}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.25611524950182074}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.25122266593073656}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.11301789418493269}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24938026769426727}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24938026769426727}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24618899863126614}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24618899863126614}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2491584643696646}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2491584643696646}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24510113292757885}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24510113292757885}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24226136152415695}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24226136152415695}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.1040565897783531}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23833285856286635}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23833285856286635}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23376963163271353}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23376963163271353}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23481560390493855}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23481560390493855}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23754047507452797}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23754047507452797}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23834380987851986}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23834380987851986}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10013903813271599}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23944978922515392}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23944978922515392}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2397016689179292}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2397016689179292}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23633482694668645}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23633482694668645}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23533635431730224}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23533635431730224}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2380371126488242}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2380371126488242}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.09983234090302036}"
16:42:03 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23806375564567106}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23806375564567106}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23982481700288888}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23982481700288888}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24123929724371393}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24123929724371393}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23911589245640613}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23911589245640613}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23875122374673355}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23875122374673355}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10054645200092968}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24253231859583624}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24253231859583624}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2440965649626115}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2440965649626115}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24324704510381343}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24324704510381343}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2437716451535296}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2437716451535296}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2442702992474433}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2442702992474433}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10606552750163946}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24470943769507236}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24470943769507236}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24059492328065687}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24059492328065687}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2380657074279165}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2380657074279165}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23813836008758218}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23813836008758218}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23779990163185136}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23779990163185136}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.09959512988604749}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23751384918287705}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23751384918287705}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23894589428061647}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23894589428061647}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23988436943140604}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23988436943140604}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24208899117522906}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24208899117522906}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24156286359959506}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24156286359959506}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.1033580918537912}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24033644407229388}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24033644407229388}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2417468590295093}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2417468590295093}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24284025461901487}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24284025461901487}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24114978356040295}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.24114978356040295}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23916321903272575}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.23916321903272575}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10095844728692188}"
16:42:29 -- collecting point 50
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.2385903501102578}"
testing age>10.0
evaluate ot="age>10.0" t="age>10.0", ctx="{'age': None}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 0.225332554728008}"
condition Ar39<0.3 is true trips=1/1
16:42:31 -- Conditional tripped: Ar39.bs_corrected<0.3 condition Ar39<0.3 is True
16:42:31 -- truncation conditional condition Ar39<0.3 is True. measurement iteration executed 50/120 counts
waiting for write to finish
measurement finished
estimated time: 125.829 actual time: :52.599
flush and close file /Users/jan/PychronDev/data/isotopes/e2/5bb30b-92ed-4aab-a261-3e9ff851f5f8.h5
activate_detectors ('H1', 'AX', 'L2', 'CDD') {'peak_center': True}
peak_center () {'detector': 'H1', 'integration_time': 0.262144, 'isotope': 'Ar40'}
peak center: mean=1.34369137577 threshold=3
Skipping peak center. intensities to small. 1.34369137577<3
finished measure script
executed snippet estimated_duration=571.652928, duration=145.072197914
jan_unknown400_120.py completed successfully
Measurement Finished
16:42:31 -- ******* Measurement Finished *******
Post Measurement Started jan_pump_ms.py
16:42:31 -- ******* Post Measurement Started jan_pump_ms.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.79085540771e-05
Pumping spectrometer
open () {'name': 'O'}
open name=O desc=---
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open O ===>> OK
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals None
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
GetIndicatorState O ===>> OK
loading queue conditionals post_run_terminations
change switch state (True, True)
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x170fdd050>
update switch state O True args=() kw={} ncanvase=9
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x170fdd050>
active_run same as measuring_run: True
16:42:31 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open O () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.391624927521
jan_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
16:42:31 -- ******* Post Measurement Finished *******
$$$$$$$$$$$$$$$$$$$$ state at run end truncated
post measurement save measured=True aborted=False
Set filtering
setting fod for Ar41= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar40= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar36= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for CDD= {'filter_outliers': True, 'std_devs': 10, 'iterations': 1}
setting fod for Ar37= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar38= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar39= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for AX= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
not connected to db mysql://janexp@129.138.12.160/labspy
Enviromentals: {'lab_humiditys': [{'device': 'EnvironmentalMonitor',
                    'name': 'Lab Hum.',
                    'pub_date': '2017-06-26T16:40:48',
                    'title': 'iServer Hum.',
                    'value': 45.4}],
 'lab_pneumatics': [{'device': 'AirPressure',
                     'name': 'Pressure',
                     'pub_date': '2017-06-26T16:41:17',
                     'title': None,
                     'value': 86.625},
                    {'device': 'AirPressure2',
                     'name': 'Pressure2',
                     'pub_date': '2017-06-26T16:41:19',
                     'title': None,
                     'value': 87.05242}],
 'lab_temperatures': [{'device': 'Coldfinger',
                       'name': 'ColdFinger Temp.',
                       'pub_date': '2017-06-26T09:14:37',
                       'title': None,
                       'value': -194.0},
                      {'device': 'EnvironmentalMonitor',
                       'name': 'Lab Temp.',
                       'pub_date': '2017-06-26T16:37:45',
                       'title': 'iServer Temp.',
                       'value': 74.6},
                      {'device': 'Chiller',
                       'name': 'Coolant Temp.',
                       'pub_date': '2017-06-26T16:38:01',
                       'title': None,
                       'value': 18.0555555555556}]}
persistence save...
persistence save - db
post measurement save
6856052272 connecting to database sqlite://@/
connected to db sqlite://@/
create new session 6856052272
close session 6856052272
No database instance. Not saving post measurement to isotopedb database
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
massspec enabled True
create new session 5243407824
MassSpec Database Version: 16.0
close session 5243407824
saving post measurement to secondary database
saving to massspec database 129.138.12.160/massspecdata
setting labnumber to be-01-J
setting aliquot to 229
setting step to 
setting uuid to e25bb30b-92ed-4aab-a261-3e9ff851f5f8
setting irradpos to be-01-J
setting extract_device to Fusions CO2
setting tray to 
setting position to 119
setting power_requested to 0.0
setting extract_value to 0.0
setting duration to 30.0
setting duration_at_request to 30.0
setting first_stage_delay to 30.0
setting cleanup to 30.0
setting comment to 
setting irradiation to NoIrradiation
setting level to A
setting irradiation_level to A
setting sample to blank_extraction_line
setting material to Blank
setting project to REFERENCES
setting mass_spectrometer to Jan
no attribute chron_dosages
no attribute production_ratios
no attribute interference_corrections
no attribute production_name
no attribute j
Reference Isotope=Ar40
Reference Detector=H1
%%%%%%%%%%%%%%%%%%%% Comment:  %%%%%%%%%%%%%%%%%%%
adding isotope Ar41 H2
add baseline dbdet= Ar41. original det= H2
get baseline data Ar41 H2
Get data baseline <pychron.processing.isotope.Baseline object at 0x18f7b1e90> len t=50
baseline Ar41. v=-0.0799355911584, e=0.0052137540816
get signal data Ar41 H2
Get data signal Ar41 0.070+/-0.014 len t=50
adding isotope Ar40 H1
add baseline dbdet= Ar40. original det= H1
get baseline data Ar40 H1
Get data baseline <pychron.processing.isotope.Baseline object at 0x137083b10> len t=50
baseline Ar40. v=0.100977447369, e=0.00668885565187
get signal data Ar40 H1
Get data signal Ar40 -0.26+/-0.05 len t=50
adding isotope Ar39 AX
add baseline dbdet= Ar39. original det= AX
get baseline data Ar39 AX
Get data baseline <pychron.processing.isotope.Baseline object at 0x137083f90> len t=50
baseline Ar39. v=-0.0705445956632, e=0.00738207967296
get signal data Ar39 AX
Get data signal Ar39 0.27+/-0.07 len t=50
adding isotope Ar38 L1
add baseline dbdet= Ar38. original det= L1
get baseline data Ar38 L1
Get data baseline <pychron.processing.isotope.Baseline object at 0x137083ad0> len t=50
baseline Ar38. v=-0.0467333452565, e=0.00327920461867
get signal data Ar38 L1
Get data signal Ar38 0.035+/-0.010 len t=50
adding isotope Ar37 L2
add baseline dbdet= Ar37. original det= L2
get baseline data Ar37 L2
Get data baseline <pychron.processing.isotope.Baseline object at 0x137083890> len t=50
baseline Ar37. v=-0.0242275478444, e=0.00788192815113
get signal data Ar37 L2
Get data signal Ar37 0.054+/-0.021 len t=50
adding isotope Ar36 CDD
add baseline dbdet= Ar36. original det= CDD
get baseline data Ar36 CDD
Get data baseline <pychron.processing.isotope.Baseline object at 0x1295c17d0> len t=50
baseline Ar36. v=0.0, e=0.0
get signal data Ar36 CDD
Get data signal Ar36 0.0058+/-0.0010 len t=50
be-01-J-229 added analysis time 0.470442056656s
analysis added to mass spec database
mass spec save time= 0.481
persistence save - dvc
================= post measurement started
create new session 4933956720
close session 4933956720
---------------- Experiment Queue saving disabled
DVC saving peakcenter
Smart pull ahead: 0 behind: 0
Up-to-date with origin
add to repo msg=modified - ad8224ebc6dbfeb9f5997218dfa5fe690569839d.json
add to repo msg=modified - -J-229.json
add to repo msg=modified - -J-229.dat.json
add to repo msg=modified - -J-229.blan.json
add to repo msg=modified - -J-229.inte.json
add to repo msg=modified - -J-229.icfa.json
add to repo msg=modified - -J-229.base.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Jan_blank170/be-01/tags/-J-229.tags.json
add to repo msg=modified - -J-229.peak.json
add to repo msg=modified - -J-229.extr.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Jan_blank170/be-01/monitor/-J-229.moni.json
commit message=<COLLECTION>
add to repo msg=modified - -J-229.inte.json
add to repo msg=modified - -J-229.base.json
commit message=<ISOEVO> default collection fits
add to repo msg=modified - -J-229.blan.json
commit message=<BLANKS> preceding bu-FC-J-8095
add to repo msg=modified - -J-229.icfa.json
commit message=<ICFactor> default
push repository <pychron.git_archive.repo_manager.GitRepoManager object at 0x170fdd710>
pushing to remote=origin, url=https://github.com
no changes to meta repo
create new session 4933956720
add association Jan_blank170
get identifier "be-01-J"
setting analysis irradiation position=<pychron.dvc.dvc_orm.IrradiationPositionTbl object at 0x13244e6d0>
close session 4933956720
================= post measurement finished
16:42:47 -- ******* Post Run Check *******
loading queue conditionals post_run_actions
loading system conditionals post_run_actions
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Checking default post run terminations n=1
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
16:42:47 -- ******* Post Run Check Passed *******
16:42:47 -- Automated run be-01-J-229 truncated duration: 165.736 s
----------------- finish -----------------
----------------- stop -----------------
retroactive repository identifiers disabled
finish run. runs completed=17
write rem/ex queues
/Users/jan/PychronDev/experiments/rem/Load1807.rem.txt
/Users/jan/PychronDev/experiments/rem/Load1807.ex.txt
doing event level: 3
add run
