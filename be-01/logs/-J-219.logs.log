do run
loading script "jan_unknown120_60.py"
loading script "jan_pump_ms.py"
loading script "jan_microbone_CO2_cham_line.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=213.652928, duration=0.000236988067627
script duration name:unknown120_60 seconds:214.0
loading script "jan_unknown120_60.py"
loading script "jan_pump_ms.py"
loading script "jan_microbone_CO2_cham_line.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.50475311279e-05
loading script "jan_unknown120_60.py"
loading script "jan_pump_ms.py"
loading script "jan_microbone_CO2_cham_line.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.09944152832e-06
script duration name:microbone_CO2_cham_line seconds:0.0
loading script "jan_unknown120_60.py"
loading script "jan_pump_ms.py"
loading script "jan_microbone_CO2_cham_line.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000118017196655
executed snippet estimated_duration=4.0, duration=0.000880002975464
Script duration 214.0
Run total estimated duration= 215.000
run duration: 0:03:35
doing event level: 2
11:12:32 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
close session 4998412816
$$$$$ Clearing conditionals
adding conditionals 
Add queue conditionals
add default conditionals
adding default conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run be-01-J-219
loading script "jan_unknown120_60.py"
loading script "jan_pump_ms.py"
loading script "jan_microbone_CO2_cham_line.py"
loading script "jan_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run be-01-J-219
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
11:12:32 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
Pre Extraction Termination data. keys=H2,H1,AX,L1,L2,CDD, signals=-0.13282,0.08207,-0.12151,-0.06506,-0.05050,0.00000
11:12:32 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing CDD
evaluate ot="CDD.inactive" t="CDD", ctx="{'CDD': False}"
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
11:12:32 -- ******* Pre Extraction Check Passed *******
=================================================================================
11:12:32 -- stopping status monitor
stop 4985992592
Status monitor stopped
Status monitor finished
11:12:34 -- starting status monitor
start 4985992592
StatusMonitor period=1. Frequencies(state=2, checksum=3, lock=5, owner=5)
start extraction
do extraction
Analysis started at 11:12:35.589820
Extraction Started jan_microbone_CO2_cham_line.py
11:12:35 -- ******* Extraction Started jan_microbone_CO2_cham_line.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x12cc02710>
testing...
no interpolation path defined
executed snippet estimated_duration=180.0, duration=0.000130176544189
Jan microbone and CO2 line blank analysis
is blank. not heating
close () {'name': 'L', 'description': 'Microbone to Minibone'}
close name=L desc=Microbone to Minibone
checking ownership. requestor=129.138.12.150
check software interlocks L
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close L ===>> OK
GetIndicatorState L ===>> False
change switch state (True, True)
update switch state L False args=() kw={} ncanvase=4
11:12:36 -- CLOSE  VALVE-L (Microbone to Minibone)
-------------------------- close L (Microbone to Minibone) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'name': 'A', 'description': 'CO2 Laser to Jan'}
open name=A desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=4
11:12:36 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open A (CO2 Laser to Jan) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'name': 'T', 'description': 'Microbone to CO2 Laser'}
open name=T desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=4
11:12:37 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open T (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
close () {'name': 'K', 'description': 'Microbone to Getter D-50'}
close name=K desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close K ===>> OK
GetIndicatorState K ===>> False
change switch state (True, True)
update switch state K False args=() kw={} ncanvase=4
11:12:38 -- CLOSE  VALVE-K (Microbone to Getter D-50)
-------------------------- close K (Microbone to Getter D-50) result=[(True, True)]
action=close, ok=True, locked=[False]
close () {'name': 'M', 'description': 'Microbone to Getter NP-10'}
close name=M desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close M ===>> OK
GetIndicatorState M ===>> False
change switch state (True, True)
update switch state M False args=() kw={} ncanvase=4
11:12:38 -- CLOSE  VALVE-M (Microbone to Getter NP-10)
-------------------------- close M (Microbone to Getter NP-10) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'name': 'S', 'description': 'Microbone to Inlet Pipette'}
open name=S desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=4
11:12:39 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open S (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep () {'duration': 30.0}
SLEEP 30.0
block started
WaitControl setup for 30.0  
Join finished
continuing script after 9.807 s
block finished. duration 9.8080239296
close () {'description': 'Microbone to Turbo'}
close name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close U ===>> OK
GetIndicatorState U ===>> False
change switch state (True, True)
update switch state U False args=() kw={} ncanvase=4
11:12:49 -- CLOSE  VALVE-U (Microbone to Turbo)
-------------------------- close None (Microbone to Turbo) result=[(True, True)]
action=close, ok=True, locked=[False]
sleep (30.0,) {}
SLEEP 30.0
block started
WaitControl setup for 30.0  
State checksums do not match. Local:-1320360080 Remote:1127354766
State checksum failed
set states for children of V. state=True
handle state [('V', True)]
update switch state V True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
Join finished
block finished. duration 30.0594789982
sleep (30.0,) {}
SLEEP 30.0
block started
WaitControl setup for 30.0  
set states for children of Y. state=True
handle state [('Y', True)]
update switch state Y True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
set states for children of Y. state=False
handle state [('Y', False)]
update switch state Y False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
State checksums do not match. Local:1127354766 Remote:-1987372480
State checksum failed
set states for children of Z. state=True
handle state [('Z', True)]
update switch state Z True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
set states for children of Q. state=False
handle state [('Q', False)]
update switch state Q False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
State checksums do not match. Local:534293897 Remote:-142380504
State checksum failed
set states for children of B. state=False
handle state [('B', False)]
update switch state B False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
set states for children of D. state=False
handle state [('D', False)]
update switch state D False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
set states for children of Z. state=False
handle state [('Z', False)]
update switch state Z False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
Join finished
block finished. duration 30.0448698997
executed snippet estimated_duration=270.0, duration=74.0670490265
jan_microbone_CO2_cham_line.py completed successfully
GetAchievedOutput ===>> No Response
Requested Output= 0.000
Achieved Output=  0.000
GetResponseBlob ===>> No Response
GetOutputBlob ===>> No Response
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 218
Extraction Finished
11:13:49 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
11:13:49 -- Sending spectrometer configuration
======== Sending configuration ========
SetDeflection CDD,50.0 ===>> OK
SetDeflection H2,0.0 ===>> OK
SetDeflection H1,0.0 ===>> OK
SetDeflection L2,825.0 ===>> OK
SetDeflection L1,400.0 ===>> OK
SetDeflection AX,190.0 ===>> OK
SetZFocus 74.64 ===>> OK
SetZSymmetry -50.72 ===>> OK
SetExtractionLens 26.13 ===>> OK
SetIonRepeller -3.81 ===>> OK
SetElectronEnergy 75.08 ===>> OK
SetYSymmetry -2.81 ===>> OK
SetIonCounterVoltage 1590.0 ===>> OK
send trap current 200.0
GetParameter Trap Current Readback ===>> 198.147042666178
SetParameter Trap Current Set,200.0 ===>> OK
updating mftable name mftable
Using mftable located at /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
============ MFtable ===========
Isotope  H2     H1     AX     L1     L2     CDD    
Ar40     5.8269 5.8801 5.9940 6.1668 6.2324 6.3950
Ar39     5.7261 5.7724 5.8864 6.0529 6.1175 6.2815
Ar36     5.4036 5.4414 5.5498 5.7117 5.7725 5.9326
================================
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
======== Configuration Finished ========
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetParameter Trap Current Readback ===>> 198.370811206739
GetHighVoltage ===>> 4500
start measurement
do measurement
L#=be-01-J analysis type=blank_extractionline
Measurement Started jan_unknown120_60.py
11:13:49 -- ******* Measurement Started jan_unknown120_60.py *******
state changed from extraction to measurement
setting spec, defl, and gains
GetExtractionLens ===>> 26.13
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetZFocus ===>> 74.64
GetDeflection H2 ===>> 0
GetDeflection H1 ===>> 0
GetDeflection AX ===>> 190
GetDeflection L1 ===>> 400
GetDeflection L2 ===>> 825
GetDeflection CDD ===>> 50
GetGain H2 ===>> 0.0113
GetGain H1 ===>> 0.1
GetGain AX ===>> 0.097049
GetGain L1 ===>> 0.010355
GetGain L2 ===>> 0.095649
GetGain CDD ===>> 0
pre measurement save
New frame /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
testing...
no interpolation path defined
executed snippet estimated_duration=229.252928, duration=0.000115156173706
unknown measurement script
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2', 'CDD') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
set states for children of C. state=False
handle state [('C', False)]
update switch state C False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
clear isotope group
setting isotope det=H2, iso=PM41
setting isotope det=H1, iso=Ar40
setting isotope det=AX, iso=Ar39
setting isotope det=L1, iso=Ar38
setting isotope det=L2, iso=Ar37
setting isotope det=CDD, iso=Ar36
load analysis view
position_magnet ('Ar40',) {'detector': 'H1'}
detector Detector(H1)
POSITION Ar40 H1
setting detector H2 to PM41 (40.9624)
setting detector H1 to Ar40 (39.9624)
setting detector AX to Ar39 (38.9624)
setting detector L1 to Ar38 (37.9624)
setting detector L2 to Ar37 (36.9624)
setting detector CDD to Ar36 (35.9624)
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [-0.00063987  0.15840543  0.57173999]
H1 map mass to dac 39.9624 >> 5.88013
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4500
positioning Ar40 (5.88013) on H1
setting magnet DAC
current  : 5.240786
requested: 5.880130
Delta Dac: 0.639344
Checking detector protection. dv=0.63934
Checking detector "CDD". Protection Threshold: 0.8 (V)
SetMagnetDAC 5.88013 ===>> OK
Magnet settling time: 0.500
Magnet settling started None
Magnet settling complete
set_dac. change=True
update labels <pychron.experiment.plot_panel.PlotPanel object at 0x147208e30>
update labels "<pychron.graph.stacked_regression_graph.StackedRegressionGraph object at 0x16f51a1d0>"
setting label 0 H2 PM41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
update labels "<pychron.graph.stacked_graph.StackedGraph object at 0x1341de290>"
setting label 0 H2 PM41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
equilibrate () {'delay': 3, 'inlet': 'R', 'outlet': 'O', 'eqtime': 15.0}
Equilibration Started
11:13:52 -- ******* Equilibration Started *******
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close O ===>> OK
GetIndicatorState O ===>> False
change switch state (True, True)
update switch state O False args=() kw={} ncanvase=4
11:13:52 -- CLOSE  VALVE-O (Jan Ion Pump)
waiting 3s before opening inlet value ('R',)
set states for children of Z. state=True
handle state [('Z', True)]
update switch state Z True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
set states for children of P. state=False
set states for children of R. state=True
handle state [('P', False), ('R', True)]
update switch state P False args=() kw={'refresh': True} ncanvase=4
update switch state R True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=4
11:13:55 -- OPEN   VALVE-R (Jan Inlet)
set_time_zero () {}
equilibrating for 15.0sec
sniff (15.0,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /sniff/PM41 (Group) '' table H2
add group /sniff/Ar40 (Group) '' table H1
add group /sniff/Ar39 (Group) '' table AX
add group /sniff/Ar38 (Group) '' table L1
add group /sniff/Ar37 (Group) '' table L2
add group /sniff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
measuring sniff. ncounts=15.0
"sniff" increment series count="1" fit count="0" regressing="False"
starting measurement
Equilibration Finished
11:14:10 -- ******* Equilibration Finished *******
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=4
11:14:11 -- CLOSE  VALVE-R (Jan Inlet)
Post Equilibration Started jan_pump_extraction_line.py
11:14:11 -- ******* Post Equilibration Started jan_pump_extraction_line.py *******
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000146150588989
executed snippet estimated_duration=4.0, duration=0.0188970565796
Pump after analysis
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000117063522339
Pump Microbone
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=4
11:14:11 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
is_closed ('F',) {}
is F () closed?
is closed True
open () {'description': 'CO2 Laser to Jan'}
open name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
waiting for write to finish
measurement finished
estimated time: 15.729 actual time: :15.810
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
set_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
set "Ar40" to "('Linear', 'SEM')"
No fit for "PM41". defaulting to linear. check the measurement script "jan_unknown120_60.py"
set "PM41" to "linear"
set "Ar36" to "('Linear', 'SEM')"
set "Ar37" to "('linear', 'SEM')"
set "Ar38" to "('linear', 'SEM')"
set "Ar39" to "('Linear', 'SEM')"
set_baseline_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
GetIndicatorState A ===>> OK
change switch state (True, True)
set "H1" to "('average', 'SEM')"
update switch state A True args=() kw={} ncanvase=4
set "H2" to "('average', 'SEM')"
set "CDD" to "('average', 'SEM')"
set "L2" to "('average', 'SEM')"
set "L1" to "('average', 'SEM')"
set "AX" to "('average', 'SEM')"
multicollect () {'integration_time': 1, 'ncounts': 120}
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
11:14:11 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
add group /signal/PM41 (Group) '' table H2
add group /signal/Ar40 (Group) '' table H1
add group /signal/Ar39 (Group) '' table AX
add group /signal/Ar38 (Group) '' table L1
add group /signal/Ar37 (Group) '' table L2
add group /signal/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
measuring signal. ncounts=120
"signal" increment series count="2" fit count="1" regressing="True"
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
starting measurement
close () {'description': 'CO2 Laser to Roughing'}
close name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.150
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=4
11:14:13 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open M ===>> OK
set states for children of M. state=True
handle state [('M', True)]
update switch state M True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=4
11:14:13 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open K ===>> OK
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=4
11:14:14 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=4
11:14:15 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
set states for children of Z. state=False
handle state [('Z', False)]
update switch state Z False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=4
11:14:16 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('JanCO2Flag',) {}
release JanCO2Flag
Set JanCO2Flag 0 ===>> OK
executed snippet estimated_duration=6.0, duration=6.20761203766
PumpMicrobone.py completed successfully
gosub finished
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
get resource value 0.0
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
executed snippet estimated_duration=4.0, duration=6.22951698303
jan_pump_extraction_line.py completed successfully
Post Equilibration Finished
11:14:17 -- ******* Post Equilibration Finished *******
set states for children of Y. state=True
handle state [('Y', True)]
update switch state Y True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
set states for children of V. state=False
handle state [('V', False)]
update switch state V False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
set states for children of H. state=True
handle state [('H', True)]
update switch state H True args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
11:14:37 -- collecting point 25
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
set states for children of H. state=False
handle state [('H', False)]
update switch state H False args=() kw={'refresh': False} ncanvase=4
refresh_canvas_needed fired
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
11:15:04 -- collecting point 50
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
11:15:30 -- collecting point 75
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
11:15:56 -- collecting point 100
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0803849631093918}"
waiting for write to finish
measurement finished
estimated time: 125.829 actual time: :126.110
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
baselines () {'settling_time': 15.0, 'detector': 'H1', 'mass': 34.2, 'ncounts': 60}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2
add group baseline table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
detector Detector(H1)
POSITION 34.2 H1
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [-0.00063987  0.15840543  0.57173999]
H1 map mass to dac 34.2 >> 5.24078599104
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4500
positioning 34.2 (5.24078599104) on H1
setting magnet DAC
current  : 5.880130
requested: 5.240786
Delta Dac: 0.639344
Checking detector protection. dv=0.63934
Checking detector "CDD". Protection Threshold: 0.8 (V)
SetMagnetDAC 5.24078599104 ===>> OK
Magnet settling time: 0.500
Magnet settling started None
Magnet settling complete
set_dac. change=True
Delaying 15.0s for detectors to settle
Join finished
measuring baseline. ncounts=60
"baseline" increment series count="2" fit count="1" regressing="True"
starting measurement
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10202873648414978}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08503551418398674}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07770882779155931}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07556619941188067}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07603267202229898}"
11:16:59 -- collecting point 25
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07791489514756195}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07461534327989361}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07407443805589825}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07321325691837584}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0742855680010726}"
11:17:26 -- collecting point 50
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07720174304806147}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07944933530392144}"
waiting for write to finish
measurement finished
estimated time: 62.915 actual time: :63.045
flush and close file /Users/jan/PychronDev/data/isotopes/4d/c8d540-bf1d-4325-8ce7-23db86e98b73.h5
activate_detectors ('H1', 'AX', 'CDD') {'peak_center': True}
peak_center () {'detector': 'H1', 'integration_time': 0.262144, 'isotope': 'Ar40'}
peak center: mean=1.6260943718 threshold=3
Skipping peak center. intensities to small. 1.6260943718<3
finished measure script
executed snippet estimated_duration=229.252928, duration=227.784457922
jan_unknown120_60.py completed successfully
Measurement Finished
11:17:37 -- ******* Measurement Finished *******
Post Measurement Started jan_pump_ms.py
11:17:37 -- ******* Post Measurement Started jan_pump_ms.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.3882598877e-05
Pumping spectrometer
open () {'name': 'O'}
open name=O desc=---
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=4
11:17:37 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open O () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.363854885101
jan_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
11:17:38 -- ******* Post Measurement Finished *******
$$$$$$$$$$$$$$$$$$$$ state at run end measurement
state changed from measurement to success
post measurement save measured=True aborted=False
Set filtering
setting fod for Ar40= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for PM41= {'filter_outliers': False, 'std_devs': 2, 'iterations': 1}
setting fod for H2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar36= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for CDD= {'filter_outliers': True, 'std_devs': 10, 'iterations': 1}
setting fod for Ar37= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar38= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar39= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for AX= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
persistence save...
persistence save - db
post measurement save
6028350960 connecting to database sqlite:////Users/jan/PychronDev/.appdata/local_lab.db
connected to db sqlite:////Users/jan/PychronDev/.appdata/local_lab.db
create new session 6028350960
close session 6028350960
No database instance. Not saving post measurement to isotopedb database
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
massspec enabled True
create new session 5077391984
MassSpec Database Version: 16.0
close session 5077391984
saving post measurement to secondary database
saving to massspec database 129.138.12.160/massspecdata
setting labnumber to be-01-J
setting aliquot to 219
setting step to 
setting uuid to 4dc8d540-bf1d-4325-8ce7-23db86e98b73
setting irradpos to be-01-J
setting extract_device to Fusions CO2
setting tray to 
setting position to 218
setting power_requested to 0.0
setting extract_value to 0.0
setting duration to 30.0
setting duration_at_request to 30.0
setting first_stage_delay to 30.0
setting cleanup to 30.0
setting comment to CO2+microbone no getters 1 min
setting irradiation to NoIrradiation
setting level to A
setting irradiation_level to A
setting sample to blank_extraction_line
setting material to 
setting project to 
setting mass_spectrometer to jan
no attribute chron_dosages
no attribute production_ratios
no attribute interference_corrections
no attribute production_name
no attribute j
no row found for RunScriptTable ('RunScriptID',) (1924167644,)
Reference Isotope=Ar40
Reference Detector=H1
%%%%%%%%%%%%%%%%%%%% Comment: CO2+microbone no getters 1 min %%%%%%%%%%%%%%%%%%%
adding isotope PM41 H2
add baseline dbdet= PM41. original det= H2
get baseline data PM41 H2
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb95cd0> len t=60
baseline PM41. v=-0.17667428397, e=0.00690258382086
get signal data PM41 H2
Get data signal PM41 0.00+/-0.06 len t=120
adding isotope Ar40 H1
add baseline dbdet= Ar40. original det= H1
get baseline data Ar40 H1
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb95e50> len t=60
baseline Ar40. v=0.0826038747855, e=0.00534445778358
get signal data Ar40 H1
Get data signal Ar40 0.338+/-0.009 len t=120
adding isotope Ar39 AX
add baseline dbdet= Ar39. original det= AX
get baseline data Ar39 AX
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb95950> len t=60
baseline Ar39. v=-0.0708437495965, e=0.00712992381789
get signal data Ar39 AX
Get data signal Ar39 0.021+/-0.013 len t=120
adding isotope Ar38 L1
add baseline dbdet= Ar38. original det= L1
get baseline data Ar38 L1
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb953d0> len t=60
baseline Ar38. v=-0.0295653965549, e=0.00322015543847
get signal data Ar38 L1
Get data signal Ar38 0.013+/-0.005 len t=120
adding isotope Ar37 L2
add baseline dbdet= Ar37. original det= L2
get baseline data Ar37 L2
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb95d90> len t=60
baseline Ar37. v=-0.0236456774216, e=0.00637932107232
get signal data Ar37 L2
Get data signal Ar37 0.069+/-0.011 len t=120
adding isotope Ar36 CDD
add baseline dbdet= Ar36. original det= CDD
get baseline data Ar36 CDD
Get data baseline <pychron.processing.isotope.Baseline object at 0x15cb95750> len t=60
baseline Ar36. v=9.92436074678e-06, e=4.83437743744e-06
get signal data Ar36 CDD
Get data signal Ar36 0.00406+/-0.00019 len t=120
be-01-J-219 added analysis time 0.440629959106s
analysis added to mass spec database
mass spec save time= 0.449
persistence save - dvc
================= post measurement started
create new session 4983506800
close session 4983506800
---------------- Experiment Queue saving disabled
DVC saving peakcenter
Smart pull ahead: 0 behind: 0
Up-to-date with origin
add to repo msg=modified - ad8224ebc6dbfeb9f5997218dfa5fe690569839d.json
add to repo msg=modified - -J-219.json
add to repo msg=modified - -J-219.dat.json
add to repo msg=modified - -J-219.blan.json
add to repo msg=modified - -J-219.inte.json
add to repo msg=modified - -J-219.icfa.json
add to repo msg=modified - -J-219.base.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Jan_blank170/be-01/tags/-J-219.tags.json
add to repo msg=modified - -J-219.peak.json
add to repo msg=modified - -J-219.extr.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Jan_blank170/be-01/monitor/-J-219.moni.json
commit message=<COLLECTION>
add to repo msg=modified - -J-219.inte.json
add to repo msg=modified - -J-219.base.json
commit message=<ISOEVO> default collection fits
add to repo msg=modified - -J-219.blan.json
commit message=<BLANKS> preceding be-01-J-218
add to repo msg=modified - -J-219.icfa.json
commit message=<ICFactor> default
push repository <pychron.git_archive.repo_manager.GitRepoManager object at 0x131adc170>
pushing to remote=origin, url=https://github.com
meta repo has changes: scripts/jan/jan_microbone_CO2_cham_line.py
create new session 4983506800
add association Jan_blank170
get identifier "be-01-J"
setting analysis irradiation position=<pychron.dvc.dvc_orm.IrradiationPositionTbl object at 0x136b28610>
close session 4983506800
================= post measurement finished
11:17:52 -- ******* Post Run Check *******
loading queue conditionals post_run_actions
loading system conditionals post_run_actions
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Checking default post run terminations n=1
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
11:17:52 -- ******* Post Run Check Passed *******
11:17:52 -- Automated run be-01-J-219 success duration: 319.763 s
----------------- finish -----------------
----------------- stop -----------------
retroactive repository identifiers disabled
finish run. runs completed=1
update duration runid=be-01-J-219, duration=319.762953997, md5=7a766a64
adding be-01-J-219 7a766a64 to durations
adding be-01-J-219 6549a07b to frequencies
write rem/ex queues
/Users/jan/PychronDev/experiments/rem/CO2Blanks.rem.txt
/Users/jan/PychronDev/experiments/rem/CO2Blanks.ex.txt
doing event level: 3
